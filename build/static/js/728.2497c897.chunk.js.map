{"version":3,"file":"static/js/728.2497c897.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react'\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService'\n\nimport './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null)\n    const {loading, error, clearError, getCharacter} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000) \n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => { \n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error || !char) ? <Viev char={char} /> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner} \n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst Viev = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char\n    \n    let imgStyle = {'objectFit' : 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n    \n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki   } className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar","import { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService'\n\nimport './charList.scss'\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const {loading, error, getAllCharacters} = useMarvelService()\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false\n        if (newCharList.lenght < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([])\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n        itemRefs.current[id].classList.add('char__item_selected')\n        itemRefs.current[id].focus()\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'}\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'}\n            }\n            \n            return (\n                <li className=\"char__item\" \n                    key={item.id}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    onClick={() => {\n                        props.onCharSelected(item.id)\n                        focusOnItem(i)\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id)\n                            focusOnItem(i)\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList)\n\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading && !newItemLoading ? <Spinner /> : null\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)} >\n                    <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n    \nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList","import './skeleton.scss'\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\" />\n                    <div className=\"pulse skeleton__mini\" />\n                </div>\n                <div className=\"pulse skeleton__block\" />\n                <div className=\"pulse skeleton__block\" />\n                <div className=\"pulse skeleton__block\" />\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton","import { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport Skeleton from '../skeleton/Skeleton'\nimport useMarvelService from '../../services/MarvelService'\n\nimport './charInfo.scss'\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null)\n\n    const {loading, error, clearError, getCharacter} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n            return\n        }\n        \n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => { \n        setChar(char)\n    }\n\n    const skeleton = char || loading || error ?  null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error || !char) ? <Viev char={char} /> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst Viev = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n\n    let imgStyle = {'objectFit' : 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        let comicsFromCharInfo = item.resourceURI.replace(/\\D/g, '').slice(1);\n                        if (i > 9) return\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to = {`/comics/${comicsFromCharInfo}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo","import { Component } from \"react\"\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\"\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import { useState } from \"react\"\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\"\r\nimport CharList from \"../charList/CharList\"\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\n\r\nimport decoration from '../../resources/img/vision.png'\r\n\r\nconst MainPage = () => {\r\n    const [salectedChar, setChar] = useState(null)\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={salectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage"],"names":["Viev","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","clearError","getCharacter","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","lenght","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","_Fragment","comics","comicsFromCharInfo","resourceURI","replace","slice","Link","to","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","Component","salectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}